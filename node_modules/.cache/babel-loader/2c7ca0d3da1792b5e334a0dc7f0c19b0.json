{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben Vance\\\\Documents\\\\Code\\\\reactstore_backend-main\\\\src\\\\context\\\\globalStoreProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport StoreContext from \"./storeContext\";\nimport { useState } from \"react\";\nimport Cart from './../components/cart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GlobalStoreProvider = props => {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  const [user, setUser] = useState({\n    name: \"admin\",\n    id: 42\n  });\n\n  const addProdToCart = prod => {\n    console.log(\"Global add prod...\");\n    let copy = [...cart];\n    let found = false;\n\n    for (let i = 0; i < copy.length, i++;) {\n      let item = copy[i];\n\n      if (item._id === prod._id) {\n        found = true; // item.quantity = item.quantity + prod.quantity;\n\n        item.quantity += prod.quantity;\n      }\n    }\n\n    if (!found) {\n      copy.push(prod);\n    } // copy.push(prod);\n\n\n    setCart(copy);\n  };\n\n  const removeProdFromCart = _id => {\n    console.log(\"Global remove prod...\");\n    let copy = [...cart];\n\n    for (let i = 0; i < copy.length; i++) {\n      if (copy[i]._id === _id) {\n        copy.splice(i, 1);\n      }\n\n      ;\n    }\n\n    ;\n    setCart(copy);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n      value: {\n        cart: cart,\n        user: user,\n        addProdToCart: addProdToCart,\n        removeProdFromCart: removeProdFromCart\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalStoreProvider, \"so31mboSnRYYjGOJ6heN0A1hyQc=\");\n\n_c = GlobalStoreProvider;\nexport default GlobalStoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreProvider\");","map":{"version":3,"names":["StoreContext","useState","Cart","GlobalStoreProvider","props","cart","setCart","user","setUser","name","id","addProdToCart","prod","console","log","copy","found","i","length","item","_id","quantity","push","removeProdFromCart","splice","children"],"sources":["C:/Users/Ben Vance/Documents/Code/reactstore_backend-main/src/context/globalStoreProvider.jsx"],"sourcesContent":["import StoreContext from \"./storeContext\";\r\nimport { useState } from \"react\";\r\nimport Cart from './../components/cart';\r\n\r\nconst GlobalStoreProvider = (props) => {\r\n    const [cart, setCart] = useState([]);\r\n    const [user, setUser] = useState({ name: \"admin\", id: 42});\r\n\r\n    const addProdToCart = (prod) =>{\r\n        console.log(\"Global add prod...\");\r\n\r\n\r\n\r\n\r\n        let copy = [...cart];\r\n        let found = false;\r\n        for(let i=0; i< copy.length, i++;) {\r\n            let item = copy[i];\r\n\r\n            if (item._id === prod._id)\r\n            {\r\n               found = true;\r\n                // item.quantity = item.quantity + prod.quantity;\r\n                item.quantity += prod.quantity;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            copy.push(prod);\r\n        }\r\n\r\n        // copy.push(prod);\r\n        setCart(copy);\r\n    };\r\n\r\n    const removeProdFromCart = (_id) => {\r\n        console.log(\"Global remove prod...\");\r\n\r\n        let copy = [...cart];\r\n\r\n        for(let i=0; i < copy.length; i++){\r\n            if (copy[i]._id === _id){\r\n                copy.splice(i, 1);\r\n            };\r\n\r\n        };\r\n        setCart(copy);\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <StoreContext.Provider value={{\r\n                cart: cart,\r\n                user: user,\r\n                addProdToCart: addProdToCart,\r\n                removeProdFromCart: removeProdFromCart,\r\n\r\n            }}>\r\n                {props.children}\r\n            </StoreContext.Provider>\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default GlobalStoreProvider;"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EACnC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;IAAEQ,IAAI,EAAE,OAAR;IAAiBC,EAAE,EAAE;EAArB,CAAD,CAAhC;;EAEA,MAAMC,aAAa,GAAIC,IAAD,IAAS;IAC3BC,OAAO,CAACC,GAAR,CAAY,oBAAZ;IAKA,IAAIC,IAAI,GAAG,CAAC,GAAGV,IAAJ,CAAX;IACA,IAAIW,KAAK,GAAG,KAAZ;;IACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEF,IAAI,CAACG,MAAR,EAAgBD,CAAC,EAA9B,GAAmC;MAC/B,IAAIE,IAAI,GAAGJ,IAAI,CAACE,CAAD,CAAf;;MAEA,IAAIE,IAAI,CAACC,GAAL,KAAaR,IAAI,CAACQ,GAAtB,EACA;QACGJ,KAAK,GAAG,IAAR,CADH,CAEI;;QACAG,IAAI,CAACE,QAAL,IAAiBT,IAAI,CAACS,QAAtB;MACH;IACJ;;IAED,IAAI,CAACL,KAAL,EAAY;MACRD,IAAI,CAACO,IAAL,CAAUV,IAAV;IACH,CArB0B,CAuB3B;;;IACAN,OAAO,CAACS,IAAD,CAAP;EACH,CAzBD;;EA2BA,MAAMQ,kBAAkB,GAAIH,GAAD,IAAS;IAChCP,OAAO,CAACC,GAAR,CAAY,uBAAZ;IAEA,IAAIC,IAAI,GAAG,CAAC,GAAGV,IAAJ,CAAX;;IAEA,KAAI,IAAIY,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGF,IAAI,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EAAkC;MAC9B,IAAIF,IAAI,CAACE,CAAD,CAAJ,CAAQG,GAAR,KAAgBA,GAApB,EAAwB;QACpBL,IAAI,CAACS,MAAL,CAAYP,CAAZ,EAAe,CAAf;MACH;;MAAA;IAEJ;;IAAA;IACDX,OAAO,CAACS,IAAD,CAAP;EACH,CAZD;;EAcA,oBACI;IAAA,uBACI,QAAC,YAAD,CAAc,QAAd;MAAuB,KAAK,EAAE;QAC1BV,IAAI,EAAEA,IADoB;QAE1BE,IAAI,EAAEA,IAFoB;QAG1BI,aAAa,EAAEA,aAHW;QAI1BY,kBAAkB,EAAEA;MAJM,CAA9B;MAAA,UAOKnB,KAAK,CAACqB;IAPX;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH,CA5DD;;GAAMtB,mB;;KAAAA,mB;AA8DN,eAAeA,mBAAf"},"metadata":{},"sourceType":"module"}